require 'migrate/migrate'

class MigrateVotingRound < Migrate
  def migrate_voting_round(filepath="./../ccdata.xls")
    s = Roo::Excel.new(filepath)
    sheet_names = s.sheets
    voting_rounds = get_voting_round_models(sheet_names)
    save_models(voting_rounds)
  end

  def get_voting_round_models(sheet_names)
    spreadsheet_to_voting_round_question_attributes = { "Id"=>"question_id",
                                                        "Votes"=>"vote_number" }
    column_indices_names = spreadsheet_to_voting_round_question_attributes
    column_indices = get_spreadsheet_column_indices(column_indices_names, sheet_names[1])
    voting_rounds = []

    sheet_names[1..-1].each do |sheet, index|
      voting_round.push(voting_round = get_voting_round_model(spreadsheet_to_voting_round_question_attributes, name, column_indices))
    end

    return voting_rounds
  end

  def get_voting_round_model(spreadsheet_to_voting_round_question_attributes, name, column_indices)
    VotingRound.new
    voting_round.start_time = map_voting_round_start_time(name)
    voting_round.end_time = map_voting_round_end_time(name)
    voting_round.created_at = voting_round.start_time
    # voting_round.questions = get_voting_round_questions(sheet_name(index+1))
    voting_rounds.push(voting_round)
  end

  def set_voting_round_times(voting_round, label)
  end

  def map_voting_round_start_time(label)
    dates = label.split(" - ")
    year = dates[1].split(",").last
    start_date = dates[0] + year
    DateTime.parse(start_date)
  end

  def map_voting_round_end_time(label)
    dates = label.split(" - ")
    DateTime.parse(dates[1])
  end
end
